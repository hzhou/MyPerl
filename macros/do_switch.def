macros:
    KEY_OTHER:: if,elsif,else

subcode:: define_ops
    $map define_op, IF, ELIF, ELSE
    $map define_op, IF_quick

#-- if/elsif/else ---------------------------- 
subcode:: parse_keyword_other
    $elif tn_word == WORD_if
        # if(...){}  or  ... if cond;
        $if $(type:1)==T_BOS
            $call new_op, op, OP_IF, 0
            $call set_cur, T_BOS_HEAD, op
            goto try_reduce
        $else
            $call set_cur, T_BOS_TEMP, tn_word
            goto try_reduce

# -- [code] if cond;
subcode:: reduce_prefix_statement_cases
    case WORD_if:
        $if $(type:4)==T_BOS
            $call assert, $(type:3)==T_ATOM
            $call new_op2, op, OP_IF_YES, $(value:1).op, $(value:3).op
            $(value:3).op = op
            i_top-=2
            goto try_reduce

# -- block ----
subcode:: reduce_statement_cv2
    $case $(T)==OP_IF || $(T)==OP_ELIF
        $if $(T)==OP_IF
            op = $(op)
            op->left.op = $(op1)
            op->right.op = $(op_cv)
        $else # ELIF
            $(T)=OP_IF
            op_tmp = f_new_op(OP_IF,$(op), $(op1))
            op = f_new_op(OP_IF, op_tmp, $(op_cv))
            $(op) = op
        # ------------------------------
        $if s $eq "else" && !isword(s[4])
            s+=4
            op->type = OP_ELSE
            $call cv2_next
        $elif s $eq "elsif" && !isword(s[5])
            s+=5
            op->type = OP_ELIF
            $call cv2_next
        $else
            f_flatten_op_list(op, OP_IF, OP_IF)
            $call cv2_done

subcode:: reduce_statement_cv1
    $case $(T) == OP_ELSE
        $(T) = OP_IF
        op = f_new_op(OP_IF, $(op), $(op_cv))
        $(op) = op
        f_flatten_op_list(op, OP_IF, OP_IF)
        $call cv1_done

#----------------------------------------------- 
subcode:: eval_op_cases
    case OP_IF:
        n = op->left.n
        op_list = op->right.op
        # $print " eval_ops OP_IF n=$n op_list=%p", op_list

        i_else=0
        $if n%2==1
            i_else = n-1
            n--

        $for i=0:n:2
            sv_cond = eval_op(&op_list[i], $(CTX_SCALAR))
            tn_bool = do_bool(sv_cond)
            $call ret_svreg, sv_cond
            $if tn_bool
                return eval_op(&op_list[i+1],$(CTX_VOID))
        $if i_else
            return eval_op(&op_list[i_else],$(CTX_VOID))
        return NULL
#----------------------------------------------- 
subcode:: define_ops
    $map define_op, IF_YES, IF_NO # shorter hacks

subcode:: eval_op_cases
    case OP_IF_YES:
        $call if_yes_no, tn_bool
    case OP_IF_NO:
        $call if_yes_no, !tn_bool

    subcode: if_yes_no(cond)
        sv_cond = eval_op(op->left.op, $(CTX_SCALAR))
        tn_bool = do_bool(sv_cond)
        $call ret_svreg, sv_cond
        $if $(cond)
            return eval_op(op->right.op, $(CTX_VOID))
        return NULL

