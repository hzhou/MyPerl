subcode:: _autoload
    $register_prefix(sv) struct SV*
    $register_prefix(av) struct AV*
    $register_prefix(hv) struct HV*

    $register_name(f) double
    $register_prefix(f) double

macros:
    SV_UNION:: n, f, void* p
    # SV_UNION:: struct INTEGER N, struct FLOAT F

    # BASIC can directly copy values
    SV_BASIC:: SVt_undef, SVt_int, SVt_float
    # Other SV may hold additional pointers
    SV_TYPES:: SVt_hv, SVt_sv

subcode: _autoload
    $(set:types=$(SV_BASIC),SVt_BASIC,$(SV_TYPES))
    $enum(svtype) $(types)
    $global char* SV_names[]={$(join:"*":,:$(types))}

    $call @sv_prerequisite
    $(set:t=unsigned char)
    $struct(SV) enum svtype type, $(t) flag, $(t) copy, $(t) refcnt, union value
    $union $(SV_UNION)

    $enum SVf_const, SVf_register, SVf_heap
/*
subcode: _autoload
    $struct(INTEGER) uint64_t* p, char sign, short n, size
    $struct(FLOAT) f, f_eps
    $struct(COMPLEX) f_r, f_i
    # $map define_sv_type, string, integer, fixed
    # $map define_sv_type, sv, av, hv, cv
*/
#----------------------------------------------- 
fncode: get_SV_name(n_type)
    return SV_names[n_type]

macros: 
    sv_size: sizeof(struct SV)
    sv_is_reg: ($1->flag)==SVf_register
    sv_is_const: ($1->flag)==SVf_const
    sv_is_heap: ($1->flag)==SVf_heap
    
#----------------------------------------------- 
subcode: sv_set_type(sv, sigil)
    $if $(sigil)=='@'
        $(sv)->type = SVt_av
    $elif $(sigil)=='%'
        $(sv)->type = SVt_hv
    $elif $(sigil)=='*'
        $(sv)->type = SVt_io
    $else
        $(sv)->type = SVt_undef

subcode: sv_init(sv, type)
    $(if:type!=_)
        $(sv)->type = $(type)
    memset(&$(sv)->value, 0, sizeof($(sv)->value))

subcode: sv_set_n(sv, n)
    $(sv)->type = SVt_int
    $(sv)->value.n=$(n)

subcode: sv_set_f(sv, f)
    $(sv)->type = SVt_float
    $(sv)->value.f=$(f)

# -------------------------------------
subcode: sv_set_p(sv, p, type)
    $(if:type!=_)
        $(sv)->type = $(type)
    $(sv)->value.p=(void*)$(p)

#---- Ref Counting -------------------------- 
# refcnt refers to the SV variable itself, not its content
#     its content is managed by copy_on_write
fncode: SV_refinc(sv)
    # refcnt==0 is special
    $if sv->refcnt>0
        sv->refcnt++

fncode: SV_refdec(sv)
    # $print "SV_refdec %p - %d", sv, sv->refcnt
    $if sv && sv->refcnt>0
        sv->refcnt--
        $if sv->refcnt==0
            $call @sv_decopy
            $call sv_value_release, sv
            sv_release:
            $call @sv_release
    return

fncode: SV_undef(sv)
    $call sv_value_release, sv
    memset(&sv->value, 0, sizeof(sv->value))

subcode: sv_value_release(sv)
    $(set:T=$(sv)->type==SVt_$1)
    $(set:p=$(sv)->value.p)
    $call @sv_ref_release
    $case $(p)
        $case $(T:$(sv))
            SV_refdec((struct SV*)$(p))
        $case $(T:hv)
            HV_free((struct HV*)$(p))
        $call @sv_ref_release_cases

#---------------------------------------- 
macros:
    sv_hv: (struct HV*)$1->value.p
    
