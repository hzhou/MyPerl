
fncode: run_repl
    $include readline/readline.h
    $include readline/history.h
    $uselib readline

    $(set:type=parse_stack[i_stack_top-$1].type)
    $(set:value=parse_stack[i_stack_top-$1].value)
    i_stack_top = 0
    #- ref: scope.def -- compile_begin
    g_local.$grow 1
    g_local_len++
    stash_global = g_stashes[0]
    #- ref: main.def
    $call new_package, "::"
    #- ref: cv.def -- CV_begin
    stash_local = stash_new()

    $print
    $print "type \"quit\" to exit."
    $print
    $while 1
        s = readline("> ")
        $if !s || s $Eq "quit"
            return
        add_history(s)

        i_stack_top = perl_parse(s, NULL, parse_stack, i_stack_top)
        $if i_stack_top == 1 && $(type:1)==T_ATOM
            sv_ret = eval_op($(value:1).op,1,0)
            f_dump_sv(sv_ret)
            $print 
            $map ret_svreg, sv_ret
            i_stack_top = 0
        $else
            $call debug_parse_stack

        f_commit_local_names()

fncode: f_dump_sv(sv)
    $if !sv
        $print (null)
    $elif sv->type==SVt_av
        av = $(sv_av:sv)
        &call av_each, av
            f_dump_sv($(sv))
            $print " -"
    $else
        sv_str = do_string(sv)
        $if sv_str
            &call with_sv_string, sv_str
                $(s)[$(n)]='\0'
                $print "  %s-", $(s)
        $call ret_svreg, sv_str
