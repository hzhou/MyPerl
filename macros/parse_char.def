#- we'll use standard isdigit, isalpha, isalnum, etc.

#-     if custom classification is needed, redefine the macros here

subcode: _autoload
    $include ctype
    $define(isword(c)) (isalnum(c) || c=='_')
    $define(isword1st(c)) (isalpha(c) || c=='_')
    $define(isoct(c)) (c>='0' && c<='8')

# convert s in hex to number, -1 if error
fncode: hex(s, n)
    $return_type int
    n_sum = 0
    $for i=0:n
        $call get_digit, t_n, s[i]
        n_sum = n_sum*16+t_n
    return n_sum

    subcode: get_digit(n, c)
        $if $(c)>='0' && $(c)<='9'
            $(n) = $(c) & 0xf
        $elif $(c)>='a' && $(c)<='f'
            $(n) = ($(c) & 0xf) + 9
        $elif $(c)>='A' && $(c)<='F'
            $(n) = ($(c) & 0xf) + 9
        $else
            return -1

# convert code to utf8 in s, return len, -1 if error
fncode: utf(s, unsigned int code)
    $if code<=0x7f
        s[0]=code
        return 1
    $call if_range, 0x7ff, 1, 0xc0
    $call if_range, 0xffff, 2, 0xe0
    $call if_range, 0x1fffff, 3, 0xf0
    $call if_range, 0x3ffffff, 4, 0xf8
    $call if_range, 0x7fffffff, 5, 0xfc
    $else
        return -1
    $my i
    $for i=n;i>0;i--
        s[i] = 0x80 + (code & 0x3f)
        code>>=6
    return n+1

    subcode: if_range(max, n, mask)
        $(set:shift=$(n))
        $(set:shift*=6)
        $elif code<=$(max)
            n=$(n)
            s[0] = (code>>$(shift))|$(mask)
            $(if:n=5)
                code &= 0x3fffffff
            $(else)
                code &= ~(0xff<<$(shift))


