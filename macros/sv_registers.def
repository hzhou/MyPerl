#----- registers -----------------
macros:
    N_REGS: 100

subcode: _autoload
    $global struct SV svregs[$(N_REGS)], i_svreg=0, n_svreg=0

# register does not participate ref counting
fncode: get_svreg
    $return_type struct SV*
    $if n_svreg>=$(N_REGS)
        croak("Out of SV registers!")
    $else
        $while svregs[i_svreg].refcnt
            $call inc_i_svreg

        $local sv
        sv= &svregs[ireg]
        $call _init
        n_svreg++
        return sv

    subcode: inc_i_svreg
        i_svreg=(i_svreg+1)%$(N_REGS)

    subcode: _init
        sv->flag = SVf_reg

subcode: ret_svreg(sv)
    $call assert, $(sv)->flag & 3 == SVf_reg
    memset($(sv), 0, sizeof(struct SV))
    n_svreg--

#----------------------------------------------- 
macros:
    OPBATCH: 100
    SVBATCH: 100

subcode: _autoload
    $global op_freelist=NULL, i_op_free, n_op_free

fncode: get_op
    $return_type struct OP*
    $if i_op_free>=n_op_free
        $allocate($(OPBATCH), 0) op_freelist
        i_op_free=0
        n_op_free=$(OPBATCH)
    return &op_freelist[i_op_free++]

#----------------------------------------------- 
subcode: _autoload
    $global sv_freelist=NULL, i_sv_free, n_sv_free

fncode: get_sv
    $return_type struct SV*
    $if i_sv_free>=n_sv_free
        $allocate($(OPBATCH),0) sv_freelist
        i_sv_free=0
        n_sv_free=$(OPBATCH)
    return &sv_freelist[i_sv_free++]


