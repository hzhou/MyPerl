#----- registers -----------------
macros:
    N_REGS: 100

subcode: _autoload
    $global struct SV svregs[$(N_REGS)], i_svreg=0, n_svreg=0

# register does not participate ref counting
fncode: get_svreg
    $if n_svreg<$(N_REGS)
        $while svregs[i_svreg].refcnt
            $call inc_i_svreg

        $local sv
        sv= &svregs[ireg]
        memset(sv, 0, sizeof(*sv))
        sv->refcnt=1

        $call inc_i_svreg
        n_svreg++
        return sv
    $else
        return NULL

    subcode: inc_i_svreg
        i_svreg=(i_svreg+1)%$(N_REGS)

subcode: ret_svreg(sv)
    $(sv)->refcnt=0

subcode: temp_sv
    $temp sv
    $(sv) = get_svreg()
    BLOCK
    $call ret_svreg, $(sv)

#----------------------------------------------- 
macros:
    OPBATCH: 100
    SVBATCH: 100

subcode: _autoload
    $global op_freelist=NULL, i_op_free, n_op_free

fncode: get_op
    $return_type struct OP*
    $if i_op_free>=n_op_free
        $allocate($(OPBATCH), 0) op_freelist
        i_op_free=0
        n_op_free=$(OPBATCH)
    return &op_freelist[i_op_free++]

#----------------------------------------------- 
subcode: _autoload
    $global sv_freelist=NULL, i_sv_free, n_sv_free

fncode: get_sv
    $return_type struct SV*
    $if i_sv_free>=n_sv_free
        $allocate($(OPBATCH),0) sv_freelist
        i_sv_free=0
        n_sv_free=$(OPBATCH)
    return &sv_freelist[i_sv_free++]


