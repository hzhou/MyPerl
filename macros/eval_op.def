macros:
    CTX: tn_context, tn_level+1
    CTX_VOID: 0, tn_level+1
    CTX_SCALAR: 1, tn_level+1
    CTX_LIST: 2, tn_level+1
    # note: LEFT & ALIAS are similar, except ALIAS expands @
    CTX_LEFT: 3, tn_level+1
    CTX_ALIAS: 4, tn_level+1

    IS_VOID: tn_context==0
    IS_SCALAR: tn_context==1
    IS_LIST: tn_context==2
    IS_LEFT: tn_context==3
    IS_ALIAS: tn_context==4

    PARAM_CTX: tn_context, tn_level

fncode: eval_op
    $parameter op, $(PARAM_CTX)
    $return_type struct SV*
    $(set:opT=op->type==OP_$1)
    $(set:L=op->left.op)
    $(set:R=op->right.op)

    $if !op
        return NULL
    $call @debug_eval_op
    switch(op->type){
        case OP_NOOP:
            return NULL
        case OP_SEQ:
            eval_op($(L), 0, tn_level)
            return eval_op($(R), 0, tn_level)
        case OP_LIST:
            # f_flatten_op_list(op, OP_LIST, OP_list)
            $call die, "OP_LIST should be optimized away"
        case OP_list:
            $if $(IS_SCALAR)
                # (...,list) always means list
                return eval_list(op, $(CTX_LIST))
            $else
                return eval_list(op, $(CTX))
        case OP_CV:
            return run_cv(op->right.cv, $(CTX))
        case OP_CONST:
            return SV_copy(NULL, op->right.sv)
            # return op->right.sv
        $call @eval_op_cases
        default:
            $call @eval_op_group
            break    
    }
    $call die, "unsupported op: %s", get_OP_name(op->type)
    return NULL

#----------------------------------------------- 
subcode:: define_ops
    $map define_op, list

#- ref: sv_list.def
fncode: eval_list
    $parameter op, $(PARAM_CTX)
    $if !op
        return NULL
    sv = get_svreg(SVt_list)
    &call quick_list, sv
        $if op->type==OP_list
            n=op->left.n
            op_list = op->right.op
            # $print "eval_list: $n items"
            $for i=0:n
                $call add, &op_list[i]
        $else
            $call add, op
    return sv
    # ------------
    subcode: add(op)
        sv_item = eval_op($(op), $(CTX))
        $call list_add, sv_item
        # sv_list will run SV_refdec in the end

