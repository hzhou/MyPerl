fncode: do_string(sv)
    $(set:T=sv->type==SVt_$1)
    $if !sv
        return NULL
    $if $(T:string)
        return sv

    $call get_string_reg, sv_r

    $if $(T:int)
        SV_append_i(sv_r, sv->value.n)
    $elif $(T:float)
        SV_append_i(sv_r, sv->value.f)
    $call @do_string_cases
    $else
        $call die, "do_string type [%s] not supported", get_SV_name(sv->type)

    return sv_r

fncode: do_int(sv)
    $(set:T=sv->type==SVt_$1)
    $if !sv
        return 0
    $elif $(T:int)
        return sv->value.n
    $elif $(T:float)
        return (int)sv->value.f
    $elif $(T:av)
        av = $(sv_av:sv)
        return $(av_count:av)
    $call @do_int_cases
    $else
        $call die, "do_int type not supported"

fncode: do_bool(sv)
    $(set:T=sv->type==SVt_$1)
    $if !sv
        return 0
    $elif $(T:int)
        return sv->value.n != 0
    $elif $(T:float)
        return sv->value.f !=0.0
    $elif $(T:string)
        $if sv->value.S.n == 0
            return 0
        $elif sv->value.S.n==1 && sv->value.S.s[0]=='0'
            return 0
        $else
            return 1
    $elif $(T:av)
        av = $(sv_av:sv)
        return $(av_count:av) > 0
    $call @do_bool_cases
    $else
        $call die, "do_int type not supported"
