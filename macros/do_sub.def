macros:
    KEY_OTHER:: sub

subcode:: define_ops
    $call define_op, SUB

subcode:: parse_keyword_other
    $elif tn_word == WORD_sub
        $call new_op, op, OP_SUB, 0
        $call set_cur, T_BOS_HEAD, op
        goto try_reduce

subcode:: parse_bareword
    $case tn_bos_op == OP_SUB
        $call bareword_subname
        $(value:1).op->left.sv = sv
        goto lexer

subcode:: set_cv_flags
    $if $(type:1)==T_BOS_HEAD && $(value:1).op->type==OP_SUB
        cv_cur->flag = CVf_sub

subcode:: reduce_statement_cv1
    $case $(T) == OP_SUB
        sv_name = $(value:1).op->left.sv
        &call with_sv_string, sv_name
            $call add_sub, $(s), $(n), cv
        i_top -= 1
        goto lexer

# -----
subcode:: perl_init
    $global darray subs: struct CV*
    subs.$grow 10
    subs_len=1 # start at index 1 (simplify test)

subcode: add_sub(name, len, cv)
    stash_global.$set $(name), $(len), subs_len
    subs.$push $(cv)
    # printf("add sub %.*s -- %d\n", $(len),$(name),subs_len-1)

#----------------------------------------------- 
subcode:: define_ops
    $map define_op, Fcall, fcall

subcode:: parse_bareword
    $case s && *s=='('
        $call bareword_subname
        $call new_op2, op, OP_Fcall, sv, 0
        # reduce ref: parse_reduce.def
        cur.type=T_UNARY
        cur.value.op = op
        goto try_reduce

    subcode: bareword_subname
        sv = get_sv(SVt_string)
        SV_append_s(sv, "&", 1)
        SV_append_s(sv, s2, n)

#----------------------------------------------- 
subcode:: eval_op_cases
    case OP_Fcall:
        sv_name = op->left.sv
        &call with_sv_string, sv_name
            $(s)[$(n)]='\0'
            i_sub = find_global($(s))
            $if !i_sub
                $call die, "Undefined subroutine %s", $(s)
        op->left.n=i_sub
        op->type = OP_fcall
    case OP_fcall:
        i_sub=op->left.n
        cv = subs[i_sub]
        # &call svregs_ret_1
            sv_arg = eval_op(op->right.op, $(CTX_LIST))
            sv_ret = f_run_sub(cv, sv_arg, $(CTX))
            $call ret_svreg, sv_arg
        return sv_ret

#---------------
subcode:: universal_vars
    $call add_universal, @ARG # @_
    $call add_universal, @RET # returns

subcode:: match_special_av
    $case s[0]=='_' && !isword(s[1])
        s++
        $call new_op2, op, OP_GLOBAL, '@', I_at_ARG

#---------------
fncode: f_run_sub
    $parameter cv, sv_arg, $(PARAM_CTX)
    &call check_file_scope
        &call check_cv_scope
            &call set_I_at_ARG, av_arg
                sv_ret = run_cv(cv, $(CTX))
    return sv_ret

    # ----------------------------------
    subcode: check_file_scope
        $(set:da=$1,$1_len,$1_size)
        i_file_scope_save=-1
        $if cv->i_file != cur_file_scope
            i_file_scope_save = cur_file_scope
            $local struct call_stack_entry cur_stack_save
            cur_stack_save = $(da:g_local)

            cur_file_scope = cv->i_file
            $(da:g_local) = g_file_scopes[cur_file_scope]
            $call @debug_file_scope

        BLOCK

        $if i_file_scope_save>=0
            cur_file_scope = i_file_scope_save
            $(da:g_local) = cur_stack_save
            $call @debug_file_scope

    # ---------------------
    subcode: set_I_at_ARG(av)
        $my struct AV save_arg
        sv = &(g_global[I_at_ARG])
        av_arg= $(sv_av:sv)
        memcpy(&save_arg, av_arg, sizeof(struct AV))
        &call setup_args
            BLOCK
        memcpy(av_arg, &save_arg, sizeof(struct AV))


        subcode: setup_args
            $if !sv_arg
                $call sv_init, sv, _
                sv->copy= 0
            $elif sv_arg->type==SVt_av
                memcpy(av_arg, $(sv_av:sv_arg), sizeof(struct AV))
            $else
                $call get_svav_quick, sv, 1
                AV_push(av_arg, sv_arg)
            BLOCK
            $if sv_arg && sv_arg->type!=SVt_av
                $call ret_svav_quick, sv, 1

#----------------------------------------------- 
subcode: _autoload
    $global int g_local_shift, int g_local_start

subcode: g_local_shift_ivar
    $if g_local_shift && i_var>=g_local_start
        i_var += g_local_shift

subcode: g_local_shift_run_cv
    i_0 += g_local_shift

subcode: check_cv_scope
    i_save_start = g_local_start
    i_save_shift = g_local_shift
    g_local_start = cv->i_start
    g_local_shift = g_local_len - cv->i_start
    BLOCK
    g_local_start = i_save_start
    g_local_shift = i_save_shift

#----------------------------------------------- 
subcode:: eval_op_cases
    case OP_RETURN:
        $global sv_RETURN
        sv_RETURN = eval_op(op->right.op, $(CTX_LIST))
        cv = op->left.cv
        sv_ret=get_svreg(0)
        $call sv_set_goto, sv_ret, cv, GOTO_return
        return sv_ret



