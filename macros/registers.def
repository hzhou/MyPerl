#----- registers -----------------
macros:
    MASK_REGS: 0xff
    N_REGS: 0x100

subcode: _autoload
    $global struct SV svregs[$(N_REGS)], i_svreg=0, n_svreg=0

fncode: get_svreg(tn_type)
    $return_type struct SV*
    $if n_svreg>=$(N_REGS)
        $print registers exhausted
        return get_sv(tn_type)

    $while svregs[i_svreg].flag
        $call inc_i_svreg

    sv= &svregs[i_svreg]
    $call _init
    n_svreg++
    $call @count, get_svreg
    return sv

    subcode: inc_i_svreg
        # %->&: 0.885s -> 0.803s
        i_svreg=(i_svreg+1) & $(MASK_REGS)

    subcode: _init
        sv->flag = SVf_register
        sv->refcnt = 1
        $call sv_init, sv, tn_type

subcode: ret_svreg(sv)
    $if $(sv)
        SV_refdec($(sv))

#----------------------------------------------- 
subcode:: sv_release
    $case $(sv_is_reg:sv)
        sv->flag = 0
        n_svreg--
        $call @count, ret_svreg

#----------------------------------------------- 
#- convenience
subcode: get_string_reg(sv)
    $(sv) = get_svreg(SVt_string)
    $(sv)->value.S.s=NULL
    $(sv)->value.S.n=0
    $(sv)->value.S.size=0

subcode: get_av_reg(sv, av)
    $(sv) = get_svreg(SVt_av)
    $(av) = $(sv_av:$(sv))

subcode: get_hv_reg(sv, hv)
    $(sv) = get_svreg(SVt_hv)
    $(hv) = HV_new()
    $call sv_set_p, $(sv), $(hv), _

