subcode:: sv_prerequisite
    $struct(STRING) s, n, size, int pos

macros:
    SV_UNION:: struct STRING S
    SV_TYPES:: SVt_string

#----------------------------------------------- 
subcode: if_sv_string(sv)
    $if $(sv) && $(sv)->type==SVt_string
        &call with_sv_string, $(sv)
            BLOCK

subcode: with_sv_string(sv)
    $(set:s=$(sv)->value.S.s)
    $(set:n=$(sv)->value.S.n)
    $(set:size=$(sv)->value.S.size)
    BLOCK

# -----------------------------
subcode: sv_set_s(sv, s, n, size)
    $call sv_init, $(sv), SVt_string
    $(sv)->value.S.s=$(s)
    $(sv)->value.S.n=$(n)
    $(if:size!=_)
        $(sv)->value.S.size=$(size)

subcode:: sv_ref_release
    $case $(T:string)
        &call with_sv_string, sv
            $if $(size)>0
                $print "free string sv%p - %p [%d]",sv, $(s), $(size)
                free($(s))

# ref: do_bin_ops.def -- opeq
fncode: SV_string_on_write(sv)
    $call assert, sv->type == SVt_string
    &call sv_on_write, sv
        &call with_sv_string, sv
            # $print "SV_string_on_write: sv%p %p[%d]", sv, $(s), $(n)
            s=$(s)
            n=$(n)
            n2 = n+20 # allow some room for growth
            $(s) = malloc(n2)
            memcpy($(s), s, n)
            $(n) = n
            $(size)=n2
            sv->value.S.pos=0

#----------------------------------------------- 
#- strdup, orther wise use subcode: sv_set_s
fncode: sv_from_s(s, n)
    $if n==0
        n=strlen(s)

    sv = get_sv(SVt_string)
    SV_resize(sv, n)
    &call with_sv_string, sv
        memcpy($(s), s, n)
        $(n) = n
    return sv

subcode: sv_string_terminate(sv)
    $(sv)->value.S.s[$(sv)->value.S.n]='\0'

#---- string functions -------------------------- 
fncode: SV_resize(sv, n)
    $call assert, sv->type==SVt_string
    $(set:S=sv->value.S)
    $if n==0
        n=$(S).size*5/3+20
    $else
        n+=1 # so it always can be zero terminated

    $if n>$(S).size
        $(S).s = realloc($(S).s, n)
        $(S).size = n
        # $print "SV_resize sv%p - %p - %d", sv, $(S).s, $(S).size

fncode: SV_append_sv(sv, sv_b)
    sv_s_b = do_string(sv_b)
    $if sv_s_b
        &call with_sv_string, sv_s_b
            SV_append_s(sv, $(s), $(n))
        $call ret_svreg, sv_s_b

fncode: SV_append_s(sv, s, n)
    $call assert, sv->type==SVt_string
    $(set:S=sv->value.S)
    SV_resize(sv, $(S).n+n)
    memcpy($(S).s+$(S).n, s, n)
    $(S).n+=n

fncode: SV_append_i(sv, i)
    $call assert, sv->type==SVt_string
    $(set:S=sv->value.S)
    SV_resize(sv, $(S).n+30)
    n=sprintf($(S).s+$(S).n, "%d", i)
    $(S).n+=n

fncode: SV_append_f(sv, double f)
    $call assert, sv->type==SVt_string
    $(set:S=sv->value.S)
    SV_resize(sv, $(S).n+30)
    n=sprintf($(S).s+$(S).n, "%.8g", f)
    $(S).n+=n

