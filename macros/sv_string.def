#----------------------------------------------- 
subcode: if_sv_string(sv)
    $if $(sv) && $(sv)->type==SVt_string
        &call with_sv_string, $(sv)
            BLOCK

subcode: with_sv_string(sv)
    $(set:s=$(sv)->value.S.s)
    $(set:n=$(sv)->value.S.n)
    $(set:size=$(sv)->value.S.size)
    BLOCK

subcode: sv_set_s(sv, s, n, size)
    $(sv)->type = SVt_string
    $(sv)->value.S.s=$(s)
    $(sv)->value.S.n=$(n)
    $(sv)->value.S.size=$(size)

subcode: sv_string_init(sv)
    $call sv_set_s, $(sv), NULL, 0, 0

# copy on write: s!=0, n>0, and size=0
subcode:: sv_on_write(sv)
    &call if_sv_string, $(sv)
        $if $(s) && $(size)==0
            $my s, n
            n = $(n)*5/3+20
            $allocate(n) s
            memcpy(s, $(s), $(n))
            $(size)=n

subcode:: sv_ref_release
    $case $(T:string)
        &call with_sv_string, sv
            $if $(size)>0
                free($(s))

#----------------------------------------------- 
fncode: sv_from_s(s, n)
    $if n==0
        n=strlen(s)

    sv = get_sv(SVt_string)
    SV_resize(sv, n)
    &call with_sv_string, sv
        memcpy($(s), s, n)
        $(n) = n
    return sv

subcode: sv_string_terminate(sv)
    $(sv)->value.S.s[$(sv)->value.S.n]='\0'

#---- string functions -------------------------- 
fncode: SV_resize(sv, n)
    $call assert, sv->type==SVt_string
    $(set:S=sv->value.S)
    $if n==0
        n=$(S).size*5/3+20
    $else
        n+=1 # so it always can be zero terminated

    $if n>$(S).size
        $(S).s = realloc($(S).s, n)
        $(S).size = n

fncode: SV_append_sv(sv, sv_b)
    sv_s_b = do_string(sv_b)
    &call with_sv_string, sv_s_b
        SV_append_s(sv, $(s), $(n))
    $call ret_svreg, sv_s_b

fncode: SV_append_s(sv, s, n)
    $call assert, sv->type==SVt_string
    $(set:S=sv->value.S)
    SV_resize(sv, $(S).n+n)
    memcpy($(S).s+$(S).n, s, n)
    $(S).n+=n

fncode: SV_append_i(sv, i)
    $call assert, sv->type==SVt_string
    $(set:S=sv->value.S)
    SV_resize(sv, $(S).n+30)
    n=sprintf($(S).s+$(S).n, "%d", i)
    $(S).n+=n

fncode: SV_append_f(sv, double f)
    $call assert, sv->type==SVt_string
    $(set:S=sv->value.S)
    SV_resize(sv, $(S).n+30)
    n=sprintf($(S).s+$(S).n, "%.8g", f)
    $(S).n+=n

