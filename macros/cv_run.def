include: c/darray.def
subcode:: define_ops
    $map define_op, block, loop

fncode: run_cv
    $parameter cv, $(PARAM_CTX)
    $if tn_level>0
        i_0 = cv->i_start
        $call @g_local_shift_run_cv
        i_save_len = g_local_len
        g_local_len = i_0
        $(set:n=cv->n_vars)
        $if $(n)>0
            g_local.$grow $(n)
            memset(g_local+i_0, 0, $(n) * $(sv_size))
            g_local_len += $(n)
    $else
        memset(g_local, 0, g_local_len * $(sv_size))

    $call @debug_run_cv_enter
    $call run_cv_block
    $call @debug_run_cv_leave

    $if tn_level>0
        $for i=i_0:g_local_len
            # $print deref $i
            SV_refdec(&g_local[i])
        g_local_len = i_save_len

    return sv_ret


    subcode: run_cv_block
        op_block = cv->op_block
        $(set:T=op_block->type==OP_$1)
        $if $(T:block)
            $call do_cv_op_block
        $elif $(T:loop)
            $call do_cv_op_loop
        $else # OP_CV, OP_IF
            sv_ret = eval_op(op_block, $(CTX_SCALAR))
        # ----------------------
        subcode: do_cv_op_block
            &call svregs_ret_1
                n = op_block->left.n
                op_list = op_block->right.op
                i=0
                sv_ret = NULL
                $while i<n; i++
                    # discard ret except the last one
                    $call ret_svreg, sv_ret
                    $(set:op=op_list[i])
                    $call @debug_cv_run_op_block
                    $call @svregs_reset
                    sv_ret=eval_op(&$(op), $(CTX_SCALAR))
                    $if sv_ret && sv_ret->type==SVt_goto
                        $call @handle_goto, block
        # ----------------------
        subcode: do_cv_op_loop
            # init, cond, cont, block
            op_list = op_block->right.op
            op_init = &op_list[0]
            op_cond = &op_list[1]
            op_cont = &op_list[2]
            $call assert, op_list[3].type==OP_CV
            cv = op_list[3].right.cv
            
            $call run_void, op_init
            $while 1
                $call run_cond, op_cond
                $if tn_cond
                    $call run_void, cv
                    $call run_void, op_cont
                $else
                    break
            sv_ret = NULL

            # ----
            subcode: run_void(op)
                $(if:op=cv)
                    sv_ret = run_cv($(op), $(CTX_SCALAR))
                    $if sv_ret && sv_ret->type==SVt_goto
                        $call @handle_goto, loop
                $(else)
                    $if $(op)
                        sv_ret = eval_op($(op), $(CTX_SCALAR))
                $call ret_svreg, sv_ret

            subcode: run_cond(op)
                sv_ret = eval_op($(op), $(CTX_SCALAR))
                tn_cond = do_bool(sv_ret)
                $call ret_svreg, sv_ret

#- goto, and op_block ----------------------- 
subcode:: define_ops
    $map define_op, GOTO_LABEL, GOTO, BREAK, RETURN

subcode:: reduce_goto_etc
    $(set:WORD=$(op_n)==WORD_$1)
    $case $(WORD:goto)
        $call new_op, op, OP_GOTO_LABEL, $(term)
    $case $(WORD:return)
        $call get_sub_cv
        $call new_op2, op, OP_RETURN, cv, $(term)
    $else # next, last, redo
        $if !$(term)
            $call get_loop_cv
            $map set_goto_special, next, last, redo
            $call new_op2, op, OP_GOTO, cv, tn_i
        $else
            $call @reduce_loopex_label

    subcode: set_goto_special(word)
        $case $(op_n)==WORD_$(word)
            tn_i = GOTO_$(word)

    subcode: get_loop_cv
        # default to parent cv
        i=lex_stack_len-1
        cv = lex_stack[i]
        $while i>0;i--
            $if lex_stack[i]->type==CVt_loop
                cv = lex_stack[i]
                break
    subcode: get_sub_cv
        $if cv_cur->type==CVt_sub
            cv = cv_cur
        $else
            i=lex_stack_len-1
            $while i>0;i--
                $if lex_stack[i]->type==CVt_sub
                    cv = lex_stack[i]
                    break
            $if i==0
                $call error, "return outside sub"

#----------------------------------------------- 
macros:
    SV_UNION:: struct GOTO G
    SV_TYPES:: SVt_cv, SVt_goto

subcode:: sv_prerequisite
    $register_prefix(cv) struct CV*
    $struct(GOTO) cv, i

    $define(GOTO_last) -1
    $define(GOTO_next) -2
    $define(GOTO_redo) -3
    $define(GOTO_return) -4

subcode: sv_set_goto(sv, cv, i)
    $(sv)->type = SVt_goto
    $(sv)->value.G.cv = $(cv)
    $(sv)->value.G.i = $(i)

subcode:: eval_op_cases
    case OP_GOTO:
        sv = get_svreg(SVt_goto)
        $call sv_set_goto, sv, op->left.cv, op->right.n
        return sv
    case OP_GOTO_LABEL:
        $call die, "goto label not supported"

#----------------------------------------------- 
subcode: handle_goto(type)
    $(set:i=sv_ret->value.G.i)
    $(set:b=sv_ret->value.G.cv)
    $if $(i)>0
        # goto
        $call check_goto
    $else
        # last, next, redo, return
        $call check_break

    subcode: check_goto
        $if !$(b) || $(b) == cv
            # in-block goto
            i=$(i)
            $if i<n
                $call ret_svreg, sv_ret
                continue
        $call ret_svreg, sv_ret
        sv_ret = NULL
        break

    subcode: check_break
        $if $(b) != cv
            break
        $elif $(i)==GOTO_return
            # ref: do_sub.def
            $call simple_break, sv_RETURN
        $else
            $(if:type=loop)
                $if $(i) == GOTO_last
                    $call simple_break, NULL
                $elif $(i) == GOTO_next
                    $call loop_next
                $elif $(i) == GOTO_redo
                    $call loop_redo
            $(else)
                $if $(i) == GOTO_last ||$(i) == GOTO_next
                    $call simple_break, NULL
                $elif $(i) == GOTO_redo
                    # redo the block
                    i=0
                    continue

        subcode: simple_break(ret)
            $call ret_svreg, sv_ret
            sv_ret = $(ret)
            break

        subcode: loop_next
            $call ret_svreg, sv_ret
            sv_ret = NULL
            i+=1
            continue

        subcode: loop_redo
            i-=1 # goto condition
            continue
