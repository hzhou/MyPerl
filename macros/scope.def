#----------------------------------------------- 
#- Global stashes
#-     g_stashes[0] -- default globals and all package names
#-     g_stashes[1] -- :: -- main globals
#-     g_stashes[2] ... all other package globals
subcode: _autoload
    $global darray g_stashes: struct stash *
    $global stash_global
    $set_var_attr stash_global, class=stash

    $(block:main_init)
        # g_stashes[0]
        stash_global = stash_new()
        g_stashes.$push stash_global

subcode: new_package(name)
    stash_global = stash_new()
    g_stashes.$push stash_global
    $(set:n=strlen($(name)))
    $call stash_set, g_stashes[0], $(name), $(n), g_stashes_len-1

#---- all globals are held here
subcode: _autoload
    $global darray g_global: struct SV
    $(block:main_init)
        # reserve index 0
        g_global.$grow 1
        g_global_len++

subcode: add_global(i_var, name, len)
    $(i_var) = g_global_len
    g_global.$grow 1
    g_global_len++
    $(if:name!=_)
        stash_global.$set $(name), $(len), $(i_var)
        sv_var = &g_global[$(i_var)]
        $call sv_set_type, sv_var, $(name)[0]
    $call @debug_add_global

#----------------------------------------------- 
#- Scope refers to nested local variables (my vars)
#- File --> cv (holds stash_local)
#-    each script holds a file scope 
subcode: _autoload
    $struct(call_stack_entry) sv_local, n, n_size
    $global darray g_file_scopes: struct call_stack_entry
    $global int cur_file_scope=0

    $global darray g_local: struct SV

#---- each compile creates a file scope
subcode: compile
    $call compile_begin
    BLOCK
    # need save it so run sub can reference it
    g_file_scopes.$push g_local, g_local_len, g_local_size

subcode: compile_begin
    g_local.$new
    # reserve index 0
    g_local.$grow 1
    g_local_len++
    # default global
    #     holds our var before package declaration
    stash_global = g_stashes[0]
    cur_file_scope = g_file_scopes_len

# --------------
subcode: run(cv)
    cur_file_scope = $(cv)->i_file
    $(set:da=$1,$1_len,$1_size)
    $(da:g_local) = g_file_scopes[cur_file_scope]
    $call @debug_file_scope
    run_cv($(cv), 0, 0)

#---- each scope creates new stash_local 
#-      the created cv also holds i_file (g_file[i_file])
# ref: cv.def -- cv_begin/cv_close
# ref: do_sub.def -- run_sub

#- note: index start at 1
subcode: add_local(i_var, name, len)
    $(i_var) = g_local_len
    g_local.$grow 1
    g_local_len++
    $(if:0)
        stash_local.$set $(name), $(len), $(i_var)
    $(else)
        f_add_local_name($(name), $(len), $(i_var))

    $call @debug_add_local

# special case: my $a = $a + 1; 
#     we need delay the stash_set to the end of expression.
include: c/str_pool.def
subcode:: _autoload
    $global struct strpool local_names
    $global darray local_vars: int

fncode: f_add_local_name(s_name, n, i_var)
    i_str = f_addto_strpool(&local_names, s_name, n)
    local_vars.$push i_str
    local_vars.$push i_var

fncode: f_commit_local_names
    # $print "commit_local_names: %d", local_vars_len/2
    $if local_vars_len>0
        p_strpool = &local_names
        $for i=0:local_vars_len:2
            $call get_str_pool, p_strpool, local_vars[i]
            stash_local.$set $(s), $(strlen), local_vars[i+1]
        $call darray_empty, local_vars
        $call empty_str_pool, p_strpool

subcode:: pre_reduce
    $if cur.type == T_Semi
        f_commit_local_names()

#----------------------------------------------- 
fncode: find_global(s_name)
    # assume s_name is null-terminated
    $local char_sigil
    char_sigil = *s_name++
    
    s=s_name
    s_package_begin = s_name
    s_package_end=NULL
    $local stash
    $set_var_attr stash, class=stash
    $while *s
        $if s[0]==':' && s[1]==':'
            s+=2
            s_package_end = s
            s_name = s
        $else
            s++

    $if s_package_end
        $call get_stash
        s_name-=1
        *s_name = char_sigil
    $else
        stash = stash_global
        s_name-=1

    tn_var = stash.$get s_name, s-s_name
    $if !tn_var && !s_package_end
        # try unversal variables
        stash = g_stashes[0]
        tn_var = stash.$get s_name, s-s_name

    $call @debug_find_global
    return tn_var

    subcode: get_stash
        stash = g_stashes[0]
        $(set:l=s_package_end-s_package_begin)
        i = stash.$get s_package_begin, $(l)
        $if i>0
            stash = g_stashes[i]
        $else
            return 0
           
#----- lexical stash -------------------
#-- ref: cv.def - cv_begin/cv_close
fncode: find_local(s_name)
    $local stash
    stash = stash_local
    i = lex_stack_len
    $while 1
        tn_var = f_stash_get(stash, s_name, strlen(s_name))
        $call @debug_find_local
        $if tn_var
            return tn_var
        i--
        $if i>0
            stash = lex_stack[i]->stash
        $else
            break
    return 0

