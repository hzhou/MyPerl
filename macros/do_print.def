macros:
    KEY_FN_LIST:: print,printf
    KEY_FN_LIST:: warn,die

subcode:: eval_fn_cases
    case WORD_print:
    case WORD_printf:
        sv_io = AV_get(av, 0)
        $if sv_io->type != SVt_io
            sv_io = &g_global[I_STDOUT]
        $else
            AV_shift(av)

        $if $(WORD:print)
            do_print(sv_io, av)
        $else
            do_printf(sv_io, av)

        $map ret_svreg, sv_io
        break
    case WORD_warn:
    case WORD_die:
        sv_io = &g_global[I_STDERR]
        do_print(sv_io, av)
        $if $(WORD:die)
            exit(-1)
        break

#----------------------------------------------- 
subcode:: universal_vars
    $call add_universal, $OFS # $,
    # default undef

#----------------------------------------------- 
fncode: do_print(sv_io, av)
    file_out = (FILE*)sv_io->value.p
    &call av_each, av
        sv = $(sv)
        $if sv->type==SVt_string
            $(set:S=sv->value.S)
            s=$(S).s
            n=$(S).n
            s[n]='\0'
            fputs(s, file_out)
        $elif sv->type==SVt_int
            fprintf(file_out, "%d", sv->value.n)
        $elif sv->type==SVt_float
            fprintf(file_out, "%f", sv->value.f)
        $call @do_print_sv_types
        $else
            $call error, "print unsupported sv"

fncode: do_printf(sv_io, av)
    file_out = stdout
    sv_fmt = AV_get(av, 0)
    &call if_sv_string, sv_fmt
        s_fmt = $(s)
        s_end = s_fmt + $(n)
        s = s_fmt
        i_arg=1
        $while 1; s++
            $if s==s_end
                $call print_sofar, 0
                break
            $elif *s=='%'
                $if s[1]=='%'
                    $call print_sofar, 1
                    s_fmt = s+2
                    continue
                $else
                    $call print_sofar, 0
                    # *s = '%'
                    $call scan_fmt

    subcode: print_sofar(beyond)
        $if s>s_fmt
            char_save = s[$(beyond)]
            s[$(beyond)]='\0'
            fputs(s_fmt, file_out)
            s[$(beyond)]=char_save

    subcode: scan_fmt
        s++
        # flag
        $while *s=~[-+ 0#]
            s++
        # width
        $while isdigit(*s)
            s++
        # precision
        $if *s == '.'
            s++
            $while isdigit(*s)
                s++
        # data
        $if *s=~[hl]
            $if s[1]=~[hl]
                s+=2
            $else
                s+=1
        $elif *s=~[jqLtz]
            s+=1
        # fmt
        $if *s=~[csduoxefgXEGbBp]
            $call do_fmt
            s++
            s_fmt=s
            continue
        $else
            # error
            s++
            continue

        subcode: do_fmt
            sv = AV_get(av, i_arg++)
            sv_str = SV_fmt(sv, *s, 0, 0, 0)
            $call sv_string_terminate, sv_str
            fputs(sv_str->value.S.s, file_out)
            $call ret_svreg, sv_str

include: c/string_fmt.def
fncode: SV_fmt(sv, char_fmt, n_width, n_prec, n_flag)
    $return_type struct SV*
    $if !sv
        $if char_fmt=='s'
            return sv_EMPTY
        $else
            sv=sv_FALSE

    $if char_fmt=='s'
        $if sv->type==SVt_string
            return sv
        $else
            return do_string(sv)

    $if char_fmt=='d'
        n = do_int(sv)
        $call get_string_reg, sv_ret
        SV_append_i(sv_ret, n)
        return sv_ret

    $if char_fmt == 'f'
        f = do_float(sv)
        $call get_string_reg, sv_ret
        SV_append_f(sv_ret, f)
        return sv_ret

    return NULL

