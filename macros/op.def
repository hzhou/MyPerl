subcode: _autoload
    $register_prefix(op) struct OP*
    $struct(OP) int type, union left, union right
    $union op, n, sv, cv

    $global char* OP_names[]={DUMP_STUB OP_names}

    $(setmacro:_op_idx=0x0)
    $(setmacro:_op_flag=00)
    $call @define_ops

subcode:: define_ops
    $define(OP_NOOP) 0
    $map define_op, SEQ, LIST, CONST, CV
    # ----
    subcode: define_op(name)
        $(setmacro:_op_idx+=1)
        $define(OP_$(name)) $(_op_idx)$(_op_flag)
        $(block:OP_names)
            "OP_$(name)",

    subcode: define_group(flag)
        $(setmacro:_op_flag=$(flag))
        BLOCK
        $(setmacro:_op_flag=00)

fncode: get_OP_name(n_OP)
    $return_type char*
    return OP_names[(n_OP>>8)-1]

#----------------------------------------------- 
subcode: set_op_leaf(left, v)
    $(if:v~op)
        $(op)->$(left).op = $(v)
    $(elif:v~op$)
        $(op)->$(left).op = $(v)
    $(elif:v~sv)
        $(op)->$(left).sv = $(v)
    $(elif:v~cv)
        $(op)->$(left).cv = $(v)
    $(else)
        $(op)->$(left).n = $(v)

subcode: new_op(op, type, v)
    $(op) = get_op()
    $(op)->type = $(type)
    $(op)->right.op=NULL
    $call set_op_leaf, right, $(v)

subcode: new_op2(op, type, left, right)
    $(op) = get_op()
    $(op)->type = $(type)
    $call set_op_leaf, left, $(left)
    $call set_op_leaf, right, $(right)

fncode: f_new_op(tn_type, op_a, op_b)
    op = get_op()
    op->type = tn_type
    op->left.op = op_a
    op->right.op = op_b
    return op

#----------------------------------------------- 
fncode: f_flatten_op_list(op, tn_type, tn_new_type)
    n = f_op_iter_count(op, tn_type)
    op_list = get_op_list(n)
    # $print "flatten %p-%p %s, $tn_count items", op, op_list,  get_OP_name(tn_type)
    f_op_iter_get(op, tn_type, op_list)
    op->type = tn_new_type
    op->left.n = n
    op->right.op = op_list

    subcode: iter
        op_tmp = op
        $while op_tmp->type==tn_type
            BLOCK
            op_tmp=op_tmp->left.op

# depth-first iteration
fncode: f_op_iter_count(op, tn_type)
    $return_type int
    $if op->type != tn_type
        return 1
    $else
        n_1 = f_op_iter_count(op->left.op,tn_type)
        n_2 = f_op_iter_count(op->right.op,tn_type)
        return n_1+n_2

fncode: f_op_iter_get(op, tn_type, op_list)
    $return_type struct OP*
    $if op->type != tn_type
        *op_list = *op
        return op_list+1
    $else
        op_next = f_op_iter_get(op->left.op, tn_type, op_list)
        return f_op_iter_get(op->right.op, tn_type, op_next)
