subcode: _autoload
    $register_prefix(op) struct OP*
    $struct(OP) int type, union left, union right
    $union op, n, sv, cv

    $global char* OP_names[]={DUMP_STUB OP_names}

    $call @define_ops

subcode:: define_ops
    $map define_op, SEQ, LIST, CONST, CV

    subcode: define_op(name)
        $(setmacro:_op_idx+=1)
        $define(OP_$(name)) $(_op_idx)
        $(block:OP_names)
            "OP_$(name)",

    subcode: define_op_sym(o)
        $call define_op, $(sym:$(o))

    subcode: define_range(name)
        $call define_op, $(name)_a
        BLOCK
        $call define_op, $(name)_z

macros:
    op_is: op->type>OP_$1_a && op->type<OP_$1_z

fncode: get_OP_name(n_OP)
    $return_type char*
    return OP_names[n_OP-1]

#----------------------------------------------- 
subcode: set_op_leaf(left, v)
    $(if:v~op)
        $(op)->$(left).op = $(v)
    $(elif:v~op$)
        $(op)->$(left).op = $(v)
    $(elif:v~sv)
        $(op)->$(left).sv = $(v)
    $(elif:v~cv)
        $(op)->$(left).cv = $(v)
    $(else)
        $(op)->$(left).n = $(v)

subcode: new_op(op, type, v)
    $(op) = get_op()
    $(op)->type = $(type)
    $call set_op_leaf, right, $(v)

subcode: new_op2(op, type, left, right)
    $(op) = get_op()
    $(op)->type = $(type)
    $call set_op_leaf, left, $(left)
    $call set_op_leaf, right, $(right)

subcode: op_list(op, type, op1, op2)
    # we'll flatten it in the end
    $(op)=get_op()
    $(op)->type=$(type)
    $(op)->left.op = $(op1)
    $(op)->right.op = $(op2)

#----------------------------------------------- 
fncode: f_flatten_op_list(op, tn_type)
    tn_count=0
    &call iter
        tn_count++
    tn_count++

    op_list = get_op_list(tn_count)
    $print "flatten %p-%p %s, $tn_count items", op, op_list,  get_OP_name(tn_type)

    i=0
    &call iter
        i++
        op_list[tn_count-i] = *(op_tmp->right.op)
        $print "  :%d %s", tn_count-i, get_OP_name(op_list[tn_count-i].type)
    op_list[0] = *(op_tmp->left.op)
    op->left.n = tn_count
    op->right.op = op_list

    subcode: iter
        op_tmp = op
        $while op_tmp->type==tn_type
            BLOCK
            op_tmp=op_tmp->left.op


