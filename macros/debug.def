#----------------------------------------------- 
# # DEBUG ON
# # DEBUG OFF

subcode: _autoload
    $global n_debug=0

#-- util ------------------------------------- 
subcode: count(v)
    $global n_$(v)
    n_$(v)++
    $(block:_debug_count)
        $dump n_$(v)

subcode:: perl_exit
    DUMP_STUB _debug_count

#-- check input from f_skip_line ------------- 
subcode: debug_check_flag
    $if *s=='D'
        $if s $eq "DEBUG"
            n_debug=1

#-- debug flag in cv ----------
subcode: _autoload
    $struct(CV) char debug

subcode: debug_cv_begin
    cv_cur->debug = n_debug
    $if n_debug
        $print >>>> cv begin

subcode: debug_cv_close
    $if n_debug
        $call debug_dump
    $if cv_cur
        n_debug = cv_cur->debug

    subcode: debug_dump
        $print <<<< cv close ----
        $dump lex_stack_len, cv->n_vars

#-- runtime ----------
subcode: debug_run_cv_enter
    $if cv->debug
        n_debug_save = n_debug
        n_debug = cv->debug
        $print "---- enter_scope: 0 global vars, %d local vars ", cv->n_vars

subcode: debug_run_cv_leave
    $if cv->debug
        n_debug = n_debug_save
        $print "---- leave_scope"

#----------------------------------------------- 
subcode: print_reduce_level
    $for i=0:i_top-2
        fputs(".", stdout)
subcode: debug_reduce_binary
    $if n_debug
        $call print_reduce_level
        $print "reduce_binary: $(type) -> %s, %s", get_OP_name($(term1)->type), get_OP_name($(term2)->type)

subcode: debug_reduce_unary
    $if n_debug
        $call print_reduce_level
        $print reduce_unary $(T)

subcode: debug_reduce_eoc
    $if n_debug
        $call print_reduce_level
        $print "reduce_eoc %c - %c", $(op_boc), $(op_eoc)
        $if $(block)->type == OP_LIST
            $print " %p [block: %s -> %s, %s]", $(block), get_OP_name($(block)->type), get_OP_name($(block)->left.op->type), get_OP_name($(block)->right.op->type)

#----------------------------------------------- 
subcode: debug_eval_op
    $if n_debug
        $for i=0:tn_level
            fputs("  ", stdout)
        $print "eval: %s", get_OP_name(op->type)

subcode: debug_cv_run_op_block
    $if cv->debug
        $print "cv_run %s [$i/$n]", cv->flag==CVf_loop?"loop":"block"
        $if n_svreg!=0
            $print "    reg: $n_svreg"

#---- var, scope -------------------------------- 
/*
subcode: debug_add_global
    # $print "add_global %s -> %d stash: %p", $(name), $(i_var), stash_global

subcode: debug_add_local
    # $print "add_local %s -> %d stash: %p", $(name), $(i_var), stash_local

subcode: debug_find_global
    # $print "find_global %s stash: %p -> %d", s_name, stash, tn_var

subcode: debug_find_local
    $if tn_var
        # $print "find_local %s stash: %p -> %d", s_name, stash, tn_var
subcode: debug_file_scope
    $print "file_scope: -> $cur_file_scope, %p[%d]", g_local, g_local_len
*/

#----------------------------------------------- 
subcode: debug_AV_push
    # $print "AV_push %p [%d %d]", av, av->i_0, av->i_n
    $(if:0)
        $if av->i_n>20
            $call die, "AV_push tripped\n"

subcode: debug_AV_free
    $if n_debug
        $print "AV_free %p", av

subcode: debug_sv_free_string
    $(if:0)
        $(s)[$(n)]='\0'
        $print "free string sv%p - %p [%d] - %s",sv, $(s), $(size), $(s)
#----------------------------------------------- 
fncode: dump_sv(sv, s_msg)
    $print "$s_msg-"
    $if !sv
        $print (null)
    $elif sv->type==SVt_int
        $print "<%d>", sv->value.n
    $elif sv->type==SVt_float
        $print "<%g>", sv->value.f
    $elif sv->type==SVt_string
        &call with_sv_string, sv
            printf("<%.*s>\n", $(n), $(s))
    $elif sv->type==SVt_av
        av = $(sv_av:sv)
        $print "<AV:%p:%d>", av, av->i_n-av->i_0
    $else
        $print <sv>

#----------------------------------------------- 
subcode: debug_pcre
    $map check, NOMATCH, NULL, BADOPTION, BADMAGIC, UNKNOWN_NODE, NOMEMORY

    subcode: check(E)
        $case n_regex_caps == PCRE_ERROR_$(E)
            $print "PCRE_ERROR_$(E)"

#---------------------------------------- 
subcode: debug_parse
    $(if:debug_parse)
        $local i_loop=0
        i_loop++
        $if i_loop>$(debug_parse)
            $call error, debug_parse tripped
