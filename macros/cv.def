subcode: _autoload
    # ref: scope.def
    $struct(CV) stash, i_file, i_start, n_vars, n_seq, op_block
    $struct(CV) int flag
    $register_prefix(cv) struct CV*

    $define(CVf_switch) 1
    $define(CVf_loop) 2
    $define(CVf_sub) 3

fncode: CV_new
    $local cv
    $allocate(1, 0) cv
    return cv

macros:
    is_top_scope: lex_stack_len==1

#---- compile time parse_reduce ----------- 
subcode: _autoload
    $global darray lex_stack: struct CV*
    $global cv_cur=NULL
    $global i_seq=0

fncode: CV_begin
    $if cv_cur
        $call cv_cur_wrap
    lex_stack.$push cv_cur

    stash_local = stash_new()
    cv_cur = CV_new()
    cv_cur->stash = stash_local
    cv_cur->i_file = cur_file_scope
    cv_cur->i_start = g_local_len
    $call @debug_cv_begin
    i_seq = 0

fncode: CV_close(op_block)
    $if op_block->type == OP_SEQ
        f_flatten_op_list(op_block, OP_SEQ, OP_block)

    cv_cur->op_block = op_block
    $call cv_cur_wrap

    cv = cv_cur
    cv_cur = lex_stack.$pop
    $if cv_cur
        g_local_len = cv_cur->i_start + cv_cur->n_vars
        i_seq   = cv_cur->n_seq
        stash_local = cv_cur->stash

    $call @debug_cv_close
    # $(export:cv=cv)
    return cv

subcode: cv_cur_wrap
    $(set:cv=cv_cur->$1)
    $(cv:n_vars) = g_local_len - $(cv:i_start)
    $(cv:n_seq)  = i_seq

# -------------------
subcode:: define_parse_terms
    # T_Stmt2 precedes block
    $map op, pre, Stmt2

subcode: reduce_cv
    cv = CV_close($(value:1).op)
    i_top-=2 # { [OP]

    # need decide whether to append T_BOS
    $call skip_spaces

    $call set_atom, OP_CV, cv
    $(set:op_cv=cur.value.op)
    $if $(type:1)==T_BOS
        # bare block
        $call shift_cur
        $call set_cur, T_EOS, 0
        goto try_reduce
    $elif $(type:1)==T_BOS_HEAD
        # e.g. do {...}
        $(set:op=$(value:1).op)
        $(set:T=$(op)->type)
        $call @reduce_statement_cv1
        $call error, "cv1"
    $elif $(type:2)==T_BOS_HEAD
        # e.g if(cond) {...}
        $(set:op=$(value:2).op)
        $(set:op1=$(value:1).op)
        $(set:T=$(op)->type)
        $call @reduce_statement_cv2
        $call error, "cv2"
    $call error, "unhandled block"

    subcode: cv1_done
        $(type:1)=T_ATOM
        $call set_cur, T_EOS, 0
        goto try_reduce

    subcode: cv2_next
        i_top-=1
        goto lexer

    subcode: cv2_done
        i_top-=1
        $call cv1_done
