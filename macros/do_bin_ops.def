#---------------------------------------- 
#-- also included: logic and, or, unary -, !, ~ (scroll down)

macros:
    arith_ops_sym:: +, -, *, /, %, **
    bit_ops_sym::   |, &, ^, >>, <<
    rel_ops_sym:: ==,!=,<,>,<=,>=,<=>
    str_ops_sym:: x, .
    str_ops_rel:: eq,ne,lt,gt,le,ge,cmp

#----------------------------------------------- 
subcode:: reduce_binary_cases
    $map BIN_sym, $(arith_ops_sym),$(bit_ops_sym),$(rel_ops_sym),$(str_ops_sym)
    $map BIN_op, $(str_ops_rel)
    $map BIN_opeq, $(arith_ops_sym),$(bit_ops_sym),.

    subcode: BIN_opeq(v)
        $call BIN, $(sym:$(v)=), OP_$(sym:$(v)=)
#----------------------------------------------- 
subcode:: define_ops
    $define(OPf_bin) 0x1
    $define(OPf_bin_assign) 0x2
    $define(OPf_bin_rel) 0x4
    $define(OPf_num) 0x10
    $define(OPf_int) 0x20
    $define(Opf_string) 0x40
    $define(Opf_other) 0x80

    &call define_group, 11 # num, bin
        $map define_op_sym, +,-,*,/,**
    &call define_group, 31 # int, num, bin
        $map define_op_sym, %,|,&,^,>>,<<
    &call define_group, 41 # string, bin
        $map define_op_sym, .,x

    &call define_group, 15 # num, rel, bin
        $map define_op_sym, ==,!=,<,>,<=,>=,<=>
    &call define_group, 45 # string, rel, bin
        $map define_op_sym, eq,ne,lt,gt,le,ge,cmp

    &call define_group, 12 # num, =
        $map define_op_eq, +,-,*,/,**
    &call define_group, 32 # int, num, =
        $map define_op_eq, %,|,&,^,>>,<<
    &call define_group, 42 # string, =
        $map define_op_eq, .

    # ----
    subcode: define_op_sym(o)
        $call define_op, $(sym:$(o))
    subcode: define_op_eq(o)
        $call define_op, $(sym:$(o)=)

macros:
    op_is_bin: op->type & 0x1
    op_is_rel: op->type & 0x4
    op_is_opeq: op->type & 0x2
    op_is_num: op->type & 0x10
    op_is_string: op->type & 0x40

subcode:: eval_op_group
    $if $(op_is_bin)
        sv_a = eval_op($(L), $(CTX_SCALAR))
        sv_b = eval_op($(R), $(CTX_SCALAR))
        $if $(op_is_rel)
            $if $(op_is_string)
                $call do_rel_string
            $elif $(op_is_num)
                $call do_rel_num
            $call @do_rel
        $else
            $if $(op_is_string)
                $call do_bin_string
            $elif $(op_is_num)
                $call do_bin_num
            $call @do_binary
        done_bin:
        $map ret_svreg, sv_b
        return sv_a
    $elif $(op_is_opeq)
        sv_a = eval_op($(L), $(CTX_LEFT))
        sv_b = eval_op($(R), $(CTX_SCALAR))
        $if $(op_is_string)
            $call do_opeq_string
        $elif $(op_is_num)
            $call do_opeq_num
        $call @do_opeq
        done_opeq:
        sv_ret = SV_copy(NULL, sv_a)
        $map ret_svreg, sv_a, sv_b
        return sv_ret

#----------------------------------------------- 
subcode: do_bin_string
    $if $(opT:$(sym:.))
        sv_a = do_string(sv_a)
        SV_string_on_write(sv_a)
        SV_append_sv(sv_a, sv_b)
    $elif $(opT:x)
        sv = get_svreg(SVt_string)
        n = do_int(sv_b)
        sv_a = do_string(sv_a)
        s_a = sv_a->value.S.s
        n_a = sv_a->value.S.n
        &call with_sv_string, sv
            $(n) = n_a*n
            SV_resize(sv, $(n)+20)
            s = $(s)
            $for i=0:n
                memcpy(s, s_a, n_a)
                s+=n_a
        $call ret_svreg, sv_a
        sv_a = sv

subcode: do_opeq_string
    SV_to_string(sv_a)
    SV_string_on_write(sv_a)
    $if $(opT:$(sym:.=))
        SV_append_sv(sv_a, sv_b)
    # $call do_xEq
    subcode: do_xEq
        $elif $(opT:x=)
            n = do_int(sv_b)
            &call with_sv_string, sv_a
                n_1 = $(n)
                n_2 = n_1 * n
                SV_resize(sv_a, n_2)
                $for i=1:n
                    memcpy($(s)+n_1*i, $(s), n_1)
                $(n) = n_2

#-----------------
subcode: do_bin_num
    $(set:f=$1->type==SVt_float)
    $if $(f:sv_a)||$(f:sv_b)||$(opT:$(sym:/))||$(opT:$(sym:**))
        f_1 = do_float(sv_a)
        f_2 = do_float(sv_b)
        $(for:o in +,-,*,/)
            $case $(opT:$(sym:$(o)))
                f_1 $(o)= f_2
        $(if:!is_opeq)
            $elif $(opT:$(sym:**))
                f_1 = pow(f_1, f_2)
        $call _sv_set, f
        goto done_bin
    $if 1 # int 
        n_1 = do_int(sv_a)
        n_2 = do_int(sv_b)
        $(for:o in +,-,*,/,%,$(bit_ops_sym))
            $case $(opT:$(sym:$(o)))
                n_1 $(o)= n_2
        $call _sv_set, n

    subcode: _sv_set(f)
        $(if:f=f)
            SV_to_float(sv_a)
        $(else)
            SV_to_int(sv_a)
        $call sv_set_$(f), sv_a, $(f)_1
        
subcode: do_opeq_num
    $(set:is_opeq=1)
    $(set:opT=op->type==OP_$1Eq)
    $call do_bin_num

#----------------------------------------------- 
#-- relation op, return sv_TRUE/sv_FALSE
subcode: do_rel_num
    $(set:f=$1->type==SVt_float)
    tn_bool=0
    $if $(f:sv_a) || $(f:sv_b)
        f_1 = do_float(sv_a)
        f_2 = do_float(sv_b)
        $call switch_op, f
    $else
        n_1 = do_int(sv_a)
        n_2 = do_int(sv_b)
        $call switch_op, n
    $call sv_set_n, sv_a, tn_bool

    subcode: switch_op(f)
        $(set:a=$(f)_1)
        $(set:b=$(f)_2)
        switch(op->type){
            $map bool_case, ==,!=,<,>,<=,>=
            case OP_$(sym:<=>):
                sv = get_svreg(SVt_undef)
                $if $(a)==$(b)
                    tn_bool = 0
                $elif $(a)<$(b)
                    tn_bool = -1
                $else
                    tn_bool = 1
        }
        # ----
        subcode: bool_case(o)
            case OP_$(sym:$(o)):
                tn_bool = $(a)$(o)$(b)?1:0
                break

subcode: do_rel_string
    sv_a = do_string(sv_a)
    sv_b = do_string(sv_b)
    $if !sv_a && !sv_b
        tn_ret = 0
    $elif !sv_a
        tn_ret = -1
    $elif !sv_b
        tn_ret = 1
    $else
        $(set:S=sv_$1->value.S)
        n= $(S:a).n
        $call update_max, n, $(S:b).n
        tn_ret = strncmp($(S:a).s, $(S:b).s, n)
    $map ret_svreg, sv_a
    sv_a = get_svreg(SVt_int)
    switch (op->type){
        $call bool_case, eq, tn_ret==0
        $call bool_case, ne, tn_ret!=0
        $call bool_case, lt, tn_ret<0
        $call bool_case, gt, tn_ret>0
        $call bool_case, le, tn_ret<=0
        $call bool_case, ge, tn_ret>=0
        case OP_cmp:
            sv_a->value.n=tn_ret
    }

    subcode: bool_case(T, cond)
        case OP_$(T):
            sv_a->value.n = $(cond)?1:0
            break

#---- or, and, ||, && --------------------------- 
subcode:: define_ops
    $map define_op, or, and

subcode:: reduce_binary_cases
    $call BIN, $(sym:||), OP_or
    $call BIN, $(sym:&&), OP_and
    $map BIN_op, or, and

subcode:: eval_op_cases
    case OP_or:
        sv_ret = eval_op($(L), $(CTX_SCALAR))
        $if do_bool(sv_ret)
            return sv_ret
        $else
            $call ret_svreg, sv_ret
            return eval_op($(R), $(CTX_SCALAR))
    case OP_and:
        sv_ret = eval_op($(L), $(CTX_SCALAR))
        $if !do_bool(sv_ret)
            return sv_ret
        $else
            $call ret_svreg, sv_ret
            return eval_op($(R), $(CTX_SCALAR))

#---- unary -, ~, ! ---------------------------
subcode:: define_ops
    $map define_op, UMINUS, NOT

subcode:: reduce_prefix_cases
    case T_UMINUS:
        $call new_op, op, OP_UMINUS, $(term)
        break
    case T_$(sym:!):
    case T_not:
        $call new_op, op, OP_NOT, $(term)
        break

subcode:: eval_op_cases
    case OP_UMINUS:
        sv_a = eval_op($(R), $(CTX_SCALAR))
        SV_to_int(sv_a)
        sv_a->value.n = -sv_a->value.n
        return sv_a
    case OP_NOT:
        sv_a = eval_op($(R), $(CTX_SCALAR))
        $if do_bool(sv_a)
            sv_ret = sv_FALSE
        $else
            sv_ret = sv_TRUE
        $call ret_svreg, sv_a
        return sv_ret

        

