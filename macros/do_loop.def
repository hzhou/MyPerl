macros:
    KEY_OTHER:: while, for

subcode:: define_ops
    $map define_op, while, for

subcode:: parse_keyword_other
    $(for:w in while, for)
        $elif tn_word == WORD_$(w)
            $call new_op, op, OP_$(w), 0
            $call set_cur, T_BOS, op
            $call cv_begin
            cv_cur->flag = CVf_loop

subcode:: reduce_statement_cv2
    $case $(T)==OP_while
        $(set:init=NULL)
        $(set:cond=$(op1))
        $(set:cont=NULL)
        $call reduce_loop_cv2

subcode:: reduce_statement_cv2
    $case $(T)==OP_for
        $if $(op1)->type==OP_SEQ
            f_flatten_op_list($(op1), OP_SEQ)
            $if $(op1)->left.n!=3
                $call error, "for condition"
            op_init = $(op1)->right.op
            op_cond = op_init+1
            op_cont = op_init+2
        $else
            $call error, "for cond"
        $(set:init=op_init)
        $(set:cond=op_cond)
        $(set:cont=op_cont)
        $call reduce_loop_cv2

subcode:: reduce_statement_cv2
    subcode: reduce_loop_cv2
        $(set:N=5)
        $call new_op_loop_goto, 1
        $call new_op_loop_cond, $(N)
        $call make_op_list, $(N), $(init), op_cond, $(op_cv), $(cont), op_goto
        $call @wrap_scope
        $call cv2_done

        subcode: make_op_list(N, @plist)
            op_list = get_op_list($(N))
            $(for:a in $(plist))
                $(if:a!=NULL)
                    op_list[$(_i)] = *($(a))
            $call new_op2, op, OP_block, $(N), op_list

        subcode: new_op_loop_goto(i)
            $call new_op, op_goto, OP_GOTO, $(i)

        subcode: new_op_loop_cond(N)
            $call new_op, op_break, OP_GOTO, $(N)
            op_cond=f_new_op(OP_IF_NO,$(cond),op_break)

    subcode: wrap_scope
        $call cv_close, op
        $call new_op, op_cv, OP_CV, $(cv)
        $(op) = op_cv

#----------------------------------------------- 
