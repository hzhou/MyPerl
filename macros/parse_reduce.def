subcode:: define_ops
    $map define_op, UNARY

subcode:: reduce_prefix
    $if $(op_t)==T_FN_GOTO
        $call @reduce_goto_etc
    $elif $(op_t)==T_FN_LIST || $(op_t)==T_FN_1
        # print ... ...
        $call new_op2, op, OP_UNARY, $(op_n), $(term)
    $elif $(op_t)==T_UNARY
        # print ( ... )
        op = $(op_op)
        $if op->type == OP_Fcall
            op->right.op = $(term)
        $else # OP_FN_LIST, OP_FN_1
            op->type = OP_UNARY
            # left is already set
            op->right.op = $(term)
    $else
        switch ($(op_t)){
            $call @reduce_prefix_cases
            default:
                $call error, "unsupported prefix"
        }
    $call done, T_ATOM

    subcode: done(T)
        $call @debug_reduce_unary
        $(op_t)=$(T)
        $(op_op)=op
        i_top-=1
        goto try_reduce

fncode: make_op_FN_LIST(tn_word, op_term)
    $(set:op_n=tn_word)
    $(set:term=op_term)
    switch ($(op_n)){
        $call @reduce_keyword_prefix
        default:
            $call error, "unsupported FN_LIST"
    }
    return op
#----------------------------------------------- 
# ';' statement terminator
#       reduces all other op except BOC
# ';' follow atom reduces to block
# ';' follow EOC should dissolve ';'
subcode:: reduce_binary
    switch ($(op_t)){
        $call BIN, Semi, OP_SEQ
        $call BIN, Comma, OP_LIST
        $call BIN, Eq, OP_ASSIGN
        $call @reduce_binary_cases
        default:
            $call error, "unsupported binary op [%s]", get_OP_name($(op_t))
            break
    }
    $(term1) = op
    i_top-=2
    goto try_reduce

    # -----------
    subcode: BIN_sym(v)
        $call BIN, $(sym:$(v)), OP_$(sym:$(v))

    subcode: BIN_op(v)
        $call BIN, $(v), OP_$(v)

    subcode: BIN(v, type)
        case T_$(v):
            $call @debug_reduce_binary
            op=f_new_op($(type),$(term1),$(term2))
            break

#----------------------------------------------- 
subcode:: resolve_op_op
    $case ($(T:EOC) || $(T:EOF)) && $(T1:Semi)
        # {...;}
        i_top--
        goto try_reduce
        
subcode:: resolve_op_op
    $case $(T:EOC) && $(T1:BOC)
        # (), {}
        i_top-=1
        cur.type = T_ATOM
        cur.value.op = NULL
        goto do_shift

