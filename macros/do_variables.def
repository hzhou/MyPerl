subcode:: define_ops
    $map define_op, GLOBAL, LOCAL, MY
    $map define_op, ASSIGN

#-- ref: macrose/parse_var.def

subcode:: eval_op_cases
    case OP_MY:
    case OP_LOCAL:
        i_var = (int)op->right.n
        $call @g_local_shift_ivar
        sv_var = &g_local[i_var]
        $if $(opT:MY)
            $call sv_set_type, sv_var, op->left.n
        $call return_var
    case OP_GLOBAL:
        i_var = (int)op->right.n
        sv_var = &g_global[i_var]
        $call return_var
    # -------------------
    subcode: return_var
        $if $(IS_LEFT)
            return sv_var
        $elif $(IS_VOID)
            return NULL
        $else 
            return SV_copy(NULL, sv_var)

#---- Index (ARRAY/HASH) ----------------
subcode:: eval_op_cases
    case OP_HASH_INDEX:
        sv_a = eval_op($(L), $(CTX_SCALAR))
        $if sv_a->type==SVt_hv
            hv = $(sv_hv:sv_a)
        $else
            $call die, "non-hash index\n"
        sv_b = eval_op($(R), $(CTX_SCALAR))
        sv_key = do_string(sv_b)
        &call if_sv_string, sv_key
            sv = HV_get(hv, $(s), $(n))
            $if sv==NULL && $(IS_LEFT)
                sv  = get_sv(0)
                HV_set(hv, $(s), $(n), sv)
            $elif sv && $(IS_SCALAR)
                sv = SV_copy(NULL, sv)
        $map ret_svreg, sv_a, sv_key
        return sv
    case OP_ARRAY_INDEX:
        sv_a = eval_op($(L), $(CTX_SCALAR))
        $if sv_a->type==SVt_av
            av = $(sv_av:sv_a)
        $else
            $call die, "non-array index\n"
        sv_b = eval_op($(L), $(CTX_SCALAR))
        i = do_int(sv_b)
        sv = AV_get(av, i)
        $if sv==NULL && $(IS_LEFT)
            sv = get_sv(0)
            AV_set(av, i, sv)
        $map ret_svreg, sv_a, sv_b
        return sv
    
#---------------------------------------- 
#---- Assignment ------------------------- 
subcode:: eval_op_cases
    # ref: do_bin_ops.def -- opeq
    case OP_ASSIGN:
        sv_var = eval_op($(L), $(CTX_LEFT))
        $if sv_var->type==SVt_list
            sv_b = eval_list($(R), $(CTX_LIST))
            $call op_assign_list
        $elif sv_var->type==SVt_av
            sv_b = eval_list($(R), $(CTX_LIST))
            &call with_sv_list, sv_b
                do_assign_av(sv_var, $(i_0), $(i_n))
        $elif sv_var->type==SVt_hv
            sv_b = eval_list($(R), $(CTX_LIST))
            &call with_sv_list, sv_b
                do_assign_hv(sv_var, $(i_0), $(i_n))
        $else
            sv_b = eval_op($(R), $(CTX_SCALAR))
            do_assign(sv_var, sv_b)

        $if sv_var->type==SVt_list
            # list cannot be copied, temporary hack
            sv_ret = NULL
        $else
            sv_ret=SV_copy(NULL, sv_var)
        $map ret_svreg, sv_b, sv_var
        return sv_ret

    subcode: op_assign_list
        $(for:var, b)
            &call with_sv_list, sv_$1
                i_0_$1 = $(i_0)
                i_n_$1 = $(i_n)

        $for i=i_0_var:i_n_var
            $if i_0_b < i_n_b
                $if g_list[i]->type == SVt_av
                    do_assign_av(g_list[i], i_0_b, i_n_b)
                    i_0_b = i_n_b
                $elif g_list[i]->type == SVt_hv
                    do_assign_hv(g_list[i], i_0_b, i_n_b)
                    i_0_b = i_n_b
                $else
                    do_assign(g_list[i], g_list[i_0_b])
                    i_0_b++
            $else
                SV_undef(g_list[i])
                g_list[i]->type = SVt_undef

fncode: do_assign_av(sv_var, i_0, i_n)
    av = $(sv_av:sv_var)
    $for i=i_0:i_n
        sv_temp = get_sv(0)
        SV_copy(sv_temp, g_list[i])
        AV_push(av, sv_temp)
        SV_refdec(sv_temp)

fncode: do_assign_hv(sv_var, i_0, i_n)
    hv = $(sv_hv:sv_var)
    $if !hv
        hv = HV_new()
        sv_var->value.p = hv
    sv_key = NULL
    $my s, n
    $if (i_n-i_0) % 2
        i_n--
    $for i=i_0:i_n:2
        $(set:sv=g_list[i])
        $(set:sv2=g_list[i+1])
        $if !$(sv)
            $call die, "error hash key"
        $if $(sv)->type==SVt_string
            sv_key = NULL
            s=$(sv)->value.S.s
            n=$(sv)->value.S.n
        $else
            SV_copy(sv_key, $(sv))
            SV_to_string(sv_key)
            s=sv_key->value.S.s
            n=sv_key->value.S.n
        sv = get_sv(0)
        SV_copy(sv, $(sv2))
        HV_set(hv, s, n, sv)
        $call ret_svreg, sv_key

fncode: do_assign(sv_var, sv_val)
    $if !sv_var
        return

    SV_undef(sv_var)
    $if !sv_val
        return

    # $print "do_assign %p <- %p", sv_var, sv_val
    SV_copy(sv_var, sv_val)

