subcode:: define_ops
    $map define_op, GLOBAL, LOCAL, MY
    $map define_op, ASSIGN

#-- ref: macrose/parse_var.def

subcode:: eval_op_cases
    case OP_MY:
    case OP_LOCAL:
        i_var = (int)op->right.n
        sv_var = &g_local[i_var]
        # $print "local var %d: %p", i_var, sv_var
        $if $(opT:MY)
            $call sv_set_type, sv_var, op->left.n
        $call return_var
    case OP_GLOBAL:
        i_var = (int)op->right.n
        sv_var = &g_global[i_var]
        $call return_var
    # -------------------
    subcode: return_var
        $if $(IS_LEFT)
            return sv_var
        $elif $(IS_VOID)
            return NULL
        $else 
            return SV_copy(NULL, sv_var)

#---- Index (ARRAY/HASH) ----------------
subcode:: eval_op_cases
    case OP_HASH_INDEX:
        sv_a = eval_op($(L), $(CTX_SCALAR))
        $if sv_a->type==SVt_hv
            hv = $(sv_hv:sv_a)
        $else
            $call die, "non-hash index\n"
        sv_b = eval_op($(R), $(CTX_SCALAR))
        sv_key = do_string(sv_b)
        &call if_sv_string, sv_key
            sv = HV_get(hv, $(s), $(n))
            $if sv==NULL && $(IS_LEFT)
                sv  = get_sv(0)
                HV_set(hv, $(s), $(n), sv)
            $elif sv && $(IS_SCALAR)
                sv = SV_copy(NULL, sv)
        $map ret_svreg, sv_a, sv_key
        return sv
    case OP_ARRAY_INDEX:
        sv_a = eval_op($(L), $(CTX_SCALAR))
        $if sv_a->type==SVt_av
            av = $(sv_av:sv_a)
        $else
            $call die, "non-array index\n"
        sv_b = eval_op($(L), $(CTX_SCALAR))
        i = do_int(sv_b)
        sv = AV_get(av, i)
        $if sv==NULL && $(IS_LEFT)
            sv = get_sv(0)
            AV_set(av, i, sv)
        $map ret_svreg, sv_a, sv_b
        return sv
    
#---- Assignment ------------------------- 
subcode:: eval_op_cases
    # ref: do_bin_ops.def -- opeq
    case OP_ASSIGN:
        sv_var = eval_op($(L), $(CTX_LEFT))
        $if sv_var->type==SVt_av && $(sv_is_reg:sv_var)
            sv_b = eval_op($(R), $(CTX_LIST))
            $call op_assign_av
        $else
            # dump_sv(sv_var, "assign ")
            sv_b = eval_op($(R), $(CTX_SCALAR))
            do_assign(sv_var, sv_b)

        sv_ret=SV_copy(NULL, sv_var)
        $map ret_svreg, sv_var, sv_b
        return sv_ret

    subcode: op_assign_av
        av_a = $(sv_av:sv_var)
        $if !av_a
            # empty
            av_a=AV_new()
            sv_a->value.p = av_a
        $if sv_b->type==SVt_av
            av_b = $(sv_av:sv_b)
            &call av_each, av_a
                do_assign($(sv), AV_get(av_b, $(i)))
        $else
            &call av_each, av_a
                $if i==0
                    do_assign($(sv), sv_b)
                $else
                    SV_undef($(sv))

fncode: do_assign(sv_var, sv_val)
    $if !sv_var
        return

    SV_undef(sv_var)
    $if !sv_val
        return

    # $print "do_assign %p <- %p", sv_var, sv_val
    $if sv_var->type==SVt_hv
        $if sv_val->type==SVt_av
            $call copy_hash, sv_var, sv_val
        $else
            $call die, "Error\n"
    $elif sv_var->type==SVt_av
        $if sv_val->type==SVt_av
            $call copy_array, sv_var, sv_val
        $else
            $call die, "Error\n"
    $elif sv_val->type==SVt_av
        av = $(sv_av:sv_val)
        $call sv_set_n, sv_var, av->i_n-av->i_0
    $else
        SV_copy(sv_var, sv_val)

    # -----------------------------
    subcode: copy_array(dst, src)
        av = AV_new()
        $(dst)->value.p = av
        av_val = $(sv_av:$(src))
        &call av_each, av_val
            sv_temp = get_sv(0)
            SV_copy(sv_temp, $(sv))
            AV_push(av, sv_temp)
            SV_refdec(sv_temp)

    subcode: copy_hash(dst, src)
        av = $(sv_av:$(src))
        hv = $(sv_hv:$(dst))
        $if !hv
            hv = HV_new()
            $(dst)->value.p = hv
        sv_key = NULL
        $my s, n
        &call av_each_pair, av
            $if !$(sv)
                $call die, "error hash key"
            $if $(sv)->type==SVt_string
                s=$(sv)->value.S.s
                n=$(sv)->value.S.n
            $else
                SV_copy(sv_key, $(sv))
                SV_to_string(sv_key)
                s=sv_key->value.S.s
                n=sv_key->value.S.n
            sv = get_sv(0)
            SV_copy(sv, $(sv2))
            HV_set(hv, s, n, sv)

