include: macros/parse_string_other.def
#----------------------------------------------- 
#-  convention: 
#-      if param is (s, n), do not assume null-terminated
#-      if param is (s), assume null-terminated

subcode:: parse_match_cases
    $elif *s=~['"]
        $my op
        $if *s=='\''
            s = f_get_str_q(s, &op)
        $else
            s = f_get_str_qq(s, &op)
        $if s==NULL
            $call error, "unterminated string"

        $call set_cur, T_ATOM, op
        goto do_shift

#----------------------------------------------- 
fncode: f_get_str_q(s, struct OP ** p_op)
    $call set_delim, s
    $local s2, n
    s = f_scan_delim(s, &s2, &n)
    $if s && p_op
        s2[n]='\0'
        $call @unescape_q
        sv = sv_from_s(s2, n)
        $call new_op, op, OP_CONST, sv
        *p_op = op
    return s
    # --------------- 
    subcode: unescape_q
        $(set:s=t_s)
        $(s)=s2
        n_skip=0
        $while *$(s); $(s)++
            $(set:esc='\\')
            $(set:c2=$(s)[1])
            $if *$(s)==$(esc) && ($(c2)==c_end || $(c2)==$(esc))
                n_skip++
                $(s)++
            $if n_skip>0
                $(s)[-n_skip]=*$(s)
        n-=n_skip

# fncode: f_get_str_qq(s, struct SV ** p_sv)
fncode: f_get_str_qq(s, struct OP ** p_op)
    $local s2, n
    s = f_scan_delim(s, &s2, &n)
    $if s && p_op
        s2[n]='\0'
        *p_op = f_parse_str_qq(s2, 0)
    return s

#---------------------------------------------------
# now assume s is null-terminated, things get easier
fncode: f_parse_str_qq(s, is_regex)
    $my op = NULL
    $local char* d=s
    s_begin = s

    $while *s; s++
        $if *s == '\\'
            switch(s[1]){
                $map simple_esc, n,t,r,f,a,b # no \v
                $call @esc_cases
                $call @string_qq_esc_other
            }
            $if !is_regex
                *d++ = s[1]
                $call next, 2
        $elif *s =~ [$@]
            ts_sigil = s
            char_sigil = *s
            $if s[1]=~[_1-9]
                $call @wrap_var, s, 2
                $call restart, 2
            $elif !isword1st(s[1]) && s[1]!='{'
                *d++ = *s++
                continue
            $elif s[1]=='{'
                s = f_scan_delim_quick(s+1)
                s++
                $call @wrap_var, ts_sigil, s-ts_sigil
                $call restart, 0
            $else
                s++
                $while *s=='$' # $$ref
                    s++
                s = f_scan_word(s+1)
                $call scan_var_indexes
                $call @wrap_var, ts_sigil, s-ts_sigil
                $call restart, 0
        *d++ = *s
    $call wrap_op
    return op
    # ----------------
    subcode: wrap_op
        $if d>s_begin
            $call op_const, op_right
            $call join_op, op_right

    subcode: join_op(R)
        $if !op
            op = $(R)
        $else
            op_left = op
            $call new_op2, op, OP_$(sym:.), op_left, $(R)

    subcode: next(n)
        $(if:n!=0)
            s+=$(n)
        continue

    subcode: restart(n)
        $(if:n!=0)
            s+=$(n)
        s_begin = d = s
        continue

    subcode: op_const(op)
        sv = sv_from_s(s_begin, d-s_begin)
        $call new_op, $(op), OP_CONST, sv

    subcode: wrap_var(s, n)
        op_var = f_parse_var($(s), $(n))
        $call @join_array_var
        $call wrap_op
        $call join_op, op_var

        subcode: join_array_var
            $if char_sigil=='@'
                $call new_op2, op_sep, OP_GLOBAL, '$', I_LIST_SEPARATOR 
                $call new_op2, op_list, OP_LIST, op_sep, op_var
                $call new_op, op_var, OP_join, op_list

    # ---- esc: \n,\t,\xhh,\0dd,\x{code},\l,\u,\Q,\E,...
    subcode: simple_esc(n)
        case '$(n)':
            *d++ = '\$(n)'
            $call next, 2

    subcode:: esc_cases
        case 'e':
            *d++ = '\x1b'
            $call next, 2

    subcode:: esc_cases
        case '0':
            $if isoct(s[2]) && isoct(s[3])
                $(set:d=(s[$1]&0xf))
                *d++ = $(d:2)*8 + $(d:3)
                $call next, 4
            $else
                break
    subcode:: esc_cases
        case 'x':
            tn_num = hex(s+2, 2)
            $if s[2]=='{'
                $call string_qq_esc_unicode
            $elif tn_num>=0
                *d = tn_num # check
                $call next, 4
            $else
                break
    subcode:: esc_cases
        case 'c':
            $if isalpha(s[2])
                *d++ = s[2]&0xf
                $call next, 3
            $else
                break
    # -----------------------------------------
    subcode: scan_var_indexes
        $if *ts_sigil=='$'
            # check index, potentially ambiguous
            $while 1
                $(set:bracket=$1=='[' || $1=='{')
                $if $(bracket:*s)
                    $call scan, s
                $elif s[0]=='-' && s[1]=='>' && ( $(bracket:s[2]) )
                    $call scan, s+2
                $else
                    break
        subcode: scan(s)
            ts_save = s
            s = f_scan_delim_quick($(s))
            $if s
                s++
            $else
                s=ts_save
                break

#---- support ---------------------------------- 
subcode: string_qq_esc_unicode
    ts_save = s
    s=f_scan_delim_quick(s+2)
    $if s
        tn_num = hex(s, s-ts_save)
        $if tn_num>=0
            t_n=utf(d, tn_num)
            $if t_n>0
                d+=t_n
                continue
        s+=1 # skip }
    $call die, "string \\x{code}"
