include: macros/av.def  # array data type
include: macros/hv.def  # hash  data type
include: macros/sv.def  # scalar 
include: macros/op.def  # syntax tree

include: macros/sv_string.def
include: macros/init.def         # @_, $_, etc.

include: macros/stash.def        # symbol table
include: macros/scope.def
include: macros/cv.def
include: macros/cv_run.def
include: macros/registers.def
include: macros/heap.def
include: macros/copy_on_write.def
include: macros/package.def

include: macros/parse.def
include: macros/eval_op.def
include: macros/repl.def

include: macros/do_convert.def
include: macros/do_bin_ops.def
include: macros/do_functions.def # buiit-ins
include: macros/do_variables.def
include: macros/do_sub.def
include: macros/do_switch.def
include: macros/do_loop.def

include: macros/do_print.def
include: macros/do_join.def
include: macros/do_stdio.def
include: macros/do_regex.def

include: macros/parse_extra.def
include: macros/debug.def

page: myperl, basic_frame
    $call @perl_init # sets up globals
    $(if:1)
        $(set:f=tests/t.pl)
        run_script("$(f)")
    $(else)
        run_repl()

#---------------------------------------- 
fncode: run_script(s_file)
    &call compile
        $call new_package, "::"
        cv_main = f_parse_script(s_file)

    $call @load_modules

    stash_global = g_stashes[1]
    $call run, cv_main

#---------------------------------------- 
subcode: _autoload
    $global struct TOK parse_stack[$(MAX_TOK_STACK)], i_stack_top

fncode: f_parse_script(s_file)
    &call open_r, s_file
        CV_begin()
        i_stack_top = perl_parse(NULL, file_in, parse_stack, 0)
        $if i_stack_top == 1
            # [OP_CV]
            cv = CV_close(parse_stack[0].value.op)
            $call assert, lex_stack_len==0
            return cv
        $else
            $call die, "f_parse_script failed."

